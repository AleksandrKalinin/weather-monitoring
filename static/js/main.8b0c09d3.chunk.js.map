{"version":3,"sources":["App.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateSearch","e","setState","search","target","value","defaultWeather","params","fetchData","isVisible","timestrSunrise","timestrSunset","iconCode","iconUrl","time","forecast","newForecast","state","weather","icon","sunrise","sys","sunset","Date","toLocaleTimeString","list","slice","newObj","map","item","index","date","dt","hours","getHours","minutes","getMinutes","seconds","getSeconds","day","getDate","weekday","getDay","formattedTime","substr","i","length","main","temp","temp_max","temp_min","description","wind","speed","push","condition","console","log","document","getElementById","currentBackground","fetchInputData","isFetching","city","ROOT_URL","concat","API_KEY","ROOT_URL2","url","url2","axios","all","get","then","spread","firstResponse","secondResponse","data","fetchForecast","catch","error","isFailed","handleKeyPress","charCode","latitude","longitude","_this2","navigator","geolocation","getCurrentPosition","pos","coords","lat","long","alert","react_default","a","createElement","react","id","src","className","Input","placeholder","onKeyPress","onChange","Button","onClick","primary","Grid","divided","Row","columns","Column","name","country","pressure","humidity","toLocaleDateString","Card","Group","itemsPerRow","key","Content","Header","max","min","currentName","currentDescription","Component","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.8b0c09d3.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport {Input,Button,Card,Grid} from 'semantic-ui-react';\nimport axios from 'axios';\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      API_KEY: \"a5821f4600801be4a4ebefc0a0a643ba\",\n      weather: [],\n      search: '',\n      latitude: null,\n      longitude: null,\n      isVisible: false,\n      isFetching: false,\n      isFailed: false,\n      timestrSunset: null,\n      timestrSunrise: null,\n      iconCode: null,\n      iconUrl: null,\n      forecast: [],\n      time: [],\n      currentBackground: ''\n    }\n  }\n\n  componentDidMount() {\n    if(navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((pos) => {\n        this.setState({\n          latitude: pos.coords.latitude,\n          longitude: pos.coords.longitude\n       })\n  \t\tconst lat = this.state.latitude;\n  \t\tconst long = this.state.longitude;\n  \t\tconst ROOT_URL = `https://api.openweathermap.org/data/2.5/weather?appid=${this.state.API_KEY}`;\n  \t\tconst ROOT_URL2= `https://api.openweathermap.org/data/2.5/forecast?appid=${this.state.API_KEY}`;\n  \t\tconst url = `${ROOT_URL}&lat=${lat}&lon=${long}&units=metric`;\n  \t\tconst url2 =`${ROOT_URL2}&lat=${lat}&lon=${long}&units=metric`;\n      axios.all([axios.get(url), axios.get(url2)])\n           .then(axios.spread((firstResponse, secondResponse) => { \n      \t\t\t\tconst weather = firstResponse.data;\n      \t\t\t\tconst forecast = secondResponse.data; \n      \t\t\t\tthis.setState({\n      \t\t\t\t\tweather: weather,\n      \t\t\t\t\tforecast: forecast\n      \t\t\t\t}, () => this.defaultWeather())\n           }))         \n        });\n      } else {\n        alert(\"Geolocation is not supported by this browser.\");\n      }\n    }\n\n    updateSearch = (e) =>{\n      this.setState({\n        search: e.target.value\n      })\n    }\n\n    defaultWeather = () =>{\n     let params = this.fetchData();\n      this.setState({\n        isVisible: true,\n        timestrSunrise: params.timestrSunrise,\n        timestrSunset: params.timestrSunset,\n        iconCode: params.iconCode,\n        iconUrl: params.iconUrl,\n        time: params.forecast,\n        forecast: params.newForecast\n      }) \n    }\n\n    fetchData = () =>{\n      var iconCode = this.state.weather.weather[0].icon;\n      var iconUrl = \"https://openweathermap.org/img/w/\" + iconCode + \".png\";      \n      var sunrise = this.state.weather.sys.sunrise;\n      var sunset = this.state.weather.sys.sunset;\n      var dateSunrise = new Date(sunrise * 1000);\n      var timestrSunrise = dateSunrise.toLocaleTimeString();\n      var dateSunset = new Date(sunset * 1000);\n      var timestrSunset = dateSunset.toLocaleTimeString();\n      var forecast = this.state.forecast.list.slice();\n      var newForecast = [];\n      var newObj = {};\n      forecast.map((item,index) =>{\n          var date = new Date(item.dt * 1000);\n          var hours = date.getHours();\n          var minutes = \"0\" + date.getMinutes();\n          var seconds = \"0\" + date.getSeconds();\n          var week = [\"Sunday\",\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n          var day = date.getDate();\n          var weekday = week[date.getDay()];\n          var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);          \n          item.dt = formattedTime;\n          item.weekday = weekday;\n          item.day = day;\n      }) \n      for (var i = 0; i < forecast.length; i+=8) {\n          let iconCode = forecast[i].weather[0].icon;\n          let iconUrl = \"https://openweathermap.org/img/w/\" + iconCode + \".png\";  \n          newObj[\"formattedTime\"] = forecast[i].dt;\n          newObj[\"weekday\"] = forecast[i].weekday;\n          newObj[\"day\"] = forecast[i].day;\n          newObj[\"temp\"] = forecast[i].main.temp;\n          newObj[\"max\"] = forecast[i].main.temp_max;\n          newObj[\"min\"] = forecast[i].main.temp_min;\n          newObj[\"currentName\"] = forecast[i].weather[0].main;\n          newObj[\"currentDescription\"] = forecast[i].weather[0].description;\n          newObj[\"icon\"] = iconUrl;\n          newObj[\"wind\"] = forecast[i].wind.speed;\n          newForecast.push(newObj);\n          newObj = {};\n      }\n      let condition = this.state.weather.weather[0].main;\n      console.log(condition);\n      let element = document.getElementById('root-wrapper')\n      if (condition == \"Clouds\") {\n        this.setState({ currentBackground: 'cloudy.jpg' })\n      }\n      else if (condition == \"Rain\" || condition == \"Drizzle\") {\n        this.setState({ currentBackground: 'rainy.jpg' })\n      }\n      else if(condition == \"Snow\") {\n        this.setState({ currentBackground: 'snowy.jpg' })\n      }\n      else if (condition == \"Mist\") {\n        this.setState({ currentBackground: 'misty.jpg' })\n      }      \n      else{\n        this.setState({ currentBackground: 'sunny.jpg' })\n      }\n      return ({\n      \ttimestrSunrise: timestrSunrise,\n      \ttimestrSunset: timestrSunset,\n      \ticonCode: iconCode,\n      \ticonUrl: iconUrl,\n      \tforecast: forecast,\n      \tnewForecast: newForecast\n      });\n    }\n\n\tfetchInputData = () =>{\n\t\tthis.setState({\n\t\t\tisVisible: false,\n\t\t\tisFetching: true\n\t\t})\n\t\tconst city = this.state.search;\n\t\tconst ROOT_URL = `https://api.openweathermap.org/data/2.5/weather?appid=${this.state.API_KEY}`;\n\t\tconst ROOT_URL2= `https://api.openweathermap.org/data/2.5/forecast?appid=${this.state.API_KEY}`;\n\t\tconst url = `${ROOT_URL}&q=${city}&units=metric`;\n\t\tconst url2 =`${ROOT_URL2}&q=${city}&units=metric`;\n\t\taxios.all([axios.get(url), axios.get(url2)])\n\t\t     .then(axios.spread((firstResponse, secondResponse) => { \n\t\t\t\tthis.setState({\n\t\t\t\t\tweather: firstResponse.data,\n\t\t\t\t\tforecast: secondResponse.data\n\t\t\t\t}, () => this.fetchForecast())\n\t\t     }))\n\t\t\t.catch((error) => {\n\t\t\t      this.setState({isFailed: true, isFetching: false, isVisible: false});\n\t\t\t  });\n    }\n\n    fetchForecast = () =>{\n     let params = this.fetchData();\n     console.log(params);\n      this.setState({\n        isVisible: true,\n        isFailed: false,\n        isFetching: false,\n        timestrSunrise: params.timestrSunrise,\n        timestrSunset: params.timestrSunset,\n        iconCode: params.iconCode,\n        iconUrl: params.iconUrl,\n        time: params.forecast,\n        forecast: params.newForecast,\n        search: ''\n      })            \n    }\n\n\thandleKeyPress = (target) => {\n\t  if(target.charCode === 13){\n\t    this.fetchInputData();\n\t    this.setState({\n\t    \tsearch: ''\n\t    })    \n\t  } \n\t}\n\n  render() {\n\n    return (\n      <Fragment>\n        <div id=\"root-image\">\n          <img src={this.state.currentBackground} />\n        </div>\n        <div id=\"root-wrapper\">\n          <div className=\"input-wrapper\">\n            <Input value={this.state.search} placeholder=\"search for city\" onKeyPress={this.handleKeyPress} className=\"main-input\" onChange={this.updateSearch} ></Input> \n            <Button onClick={this.fetchInputData} primary >Search</Button>\n          </div>\n  \t     {this.state.isVisible ?\n          <Fragment>\t     \t\n            <Grid divided className=\"weather-wrapper\">\n              <Grid.Row columns={2} className=\"top-row\" >\n                <Grid.Column className=\"column-header\">\n                  <h1>{this.state.weather.main.temp}° </h1>\n                </Grid.Column>\n                <Grid.Column className=\"column-header\">\n                  <h2>{this.state.weather.name}, {this.state.weather.sys.country}</h2>\n                </Grid.Column>\n              </Grid.Row>          \n              <Grid.Row columns={4} className=\"weather-row\">\n                <Grid.Column className=\"weather-column\" >\n                  <h4 className=\"weather-header\">{this.state.weather.main.temp_min}° / {this.state.weather.main.temp_max}° </h4>\n                  <p className=\"weather-descr\">High / Low</p>\n                </Grid.Column>\n                <Grid.Column className=\"weather-column\">\n                  <h4 className=\"weather-header\">{this.state.weather.main.temp}° </h4>\n                  <p className=\"weather-descr\">Feels like</p>\n                </Grid.Column>\n                <Grid.Column className=\"weather-column\">\n                  <h4 className=\"weather-header\">{this.state.timestrSunrise}</h4>\n                  <p className=\"weather-descr\">Sunrise</p>\n                </Grid.Column>\n                <Grid.Column className=\"weather-column\">\n                  <h4 className=\"weather-header\">{this.state.timestrSunset}</h4>\n                  <p className=\"weather-descr\">Sunset</p>\n                </Grid.Column>              \n              </Grid.Row>\n              <Grid.Row columns={4} className=\"weather-row\">\n                <Grid.Column className=\"weather-column\">\n                  <h4 className=\"weather-header\">{this.state.weather.weather[0].main} <img src={this.state.iconUrl}/></h4>\n                  <p className=\"weather-descr\">Current condition</p>\n                </Grid.Column>            \n                <Grid.Column className=\"weather-column\">\n                  <h4 className=\"weather-header\">{this.state.weather.main.pressure} hpa</h4>\n                  <p className=\"weather-descr\">Pressure</p>\n                </Grid.Column>\n                <Grid.Column className=\"weather-column\">\n                  <h4 className=\"weather-header\">{this.state.weather.main.humidity}</h4>\n                  <p className=\"weather-descr\">Humidity</p>\n                </Grid.Column>\n                <Grid.Column className=\"weather-column\">\n                  <h4 className=\"weather-header\">{this.state.weather.wind.speed} m/s</h4>\n                  <p className=\"weather-descr\">Wind</p>\n                </Grid.Column>\n              </Grid.Row>\n              <Grid.Row columns={1}>\n                <Grid.Column>\n                  <p className=\"weather-descr\">Today: {new Date().toLocaleDateString()}</p>\n                </Grid.Column>\n              </Grid.Row>            \n            </Grid>\n            <Card.Group itemsPerRow={5} className=\"forecast-wrapper\">\n              {this.state.forecast.map((item,index) =>\n                <Card key={index}>\n                  <Card.Content className=\"header-wrapper\">\n                    <Card.Header>{item.weekday}, {item.day} </Card.Header>                \n                  </Card.Content>\n                  <Card.Content className=\"icon-wrapper\">\n                    <img src={item.icon} />\n                  </Card.Content>\n                  <Card.Content className=\"icon-description\">\n                      <h4>{item.max} / {item.min}</h4>\n                      <p>{item.currentName} ({item.currentDescription})</p>\n                      <p>Wind speed: {item.wind} m/s</p>\n                  </Card.Content>\n                </Card>\n              )}\n            </Card.Group>\n  \t     </Fragment> : \n            null\n  \t    }\n  \t     { this.state.isFetching ?\n            <Grid divided className=\"weather-wrapper fetching-wrapper\">\n            \t\tFetching...\n            </Grid>\n            : null}\n  \t     { this.state.isFailed ?\n            <Grid divided className=\"weather-wrapper fetching-wrapper\">\n            \t\tSorry, the request failed. Try one more time\n            </Grid>\n            : null}          \t    \n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './style.css';\nimport './media.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n"],"sourceRoot":""}